module gen-check

imports

	include/TypeDefinitionLanguage
	lib/Stratego-Sugar

	gen-analysis
	
rules // module

	gen-check: 
		TypeDef(mname, td-parts) -> Module(<strcat> (mname, "/gen-check"), [import|str-parts])
		where
			import := Imports([Import("lib/typecheck"), Import(<strcat> (mname, "/gen-analysis"))]) ;
			str-parts := <filter(gen-check)> td-parts

rules // imports
    
    gen-check: 
    	SigPart(import*) -> Imports(import*)
    
rules // type declarations
	
    gen-check: 
    	TypePart(decls) -> Rules(<filter(gen-check)> decls)
    
    gen-check: 
    	TypeDecl(name, params, string) -> RDefNoArgs("type-to-string", RuleNoCond(Op(name, <gen-check> params), string))
    	
    gen-check: 
    	NoTypeParams() -> []
    
    gen-check: 
    	TypeParams(params) -> <map(gen-check)> params
    
    gen-check: 
    	TypeParam(name, _) -> Var(name)
    
rules // typing rules
	
	gen-check: 
		RulePart(td-rules) -> Rules(str-rules) 
		where 
			str-rules := <filter(gen-check)> td-rules ;
			<Hd> str-rules
	
	gen-check: 
		TypeRule(conditions, sep, term, type) -> <gen-check> CheckRule(conditions, sep, term)
		
	gen-check: 
		CheckRule(conditions, _, term) -> RDefNoArgs("type-check", rule)
		where
			checks := <filter(gen-check)> conditions ;
			<Hd> checks ;
			str := <foldr(!Id(), gen-str-seq)> checks ;
			rule := <gen-str-rule(|term, App(str, List([])))> []
			
	gen-str-seq: (s1, Id()) -> s1
	gen-str-seq: (s1, s2) -> Seq(s1, s2) where not(<eq> (s2, Id()))
	
rules // premises
	
	gen-check: 
		Error(p, msg) -> CallT(SVar(name), [Build(msg)|checks], terms)
		where
			<gen-check> p => CallT(SVar(name), checks, terms)
					
	gen-check: 
		Map(p) -> CallT(SVar(name'), checks, terms)
		where
			<gen-check> p => CallT(SVar(name), checks, terms) ;
			name' := <strcat> (name, "s")
	
	gen-check:	 
		TypeCheck(term, type) -> CallT(SVar("check-type"), checks, terms)
		where
			(checks, terms) := <needs-check> (term, type)
	
	gen-check: 
		Resolve(term1, term2) -> CallT(SVar("check-resolve"), checks, terms)
		where
			(checks, terms) := <needs-check> (term1, term2)
			
	gen-check: 
		ResolveCheck(term, type) -> CallT(SVar("check-resolve-type"), checks, terms)
		where
			(checks, terms) := <needs-check> (term, type)
			
	gen-check: 
		Relation(type1, rel, type2) -> CallT(SVar("check-type-rel"), [], [<gen-analysis> rel, <try(gen-analysis)> type1, <try(gen-analysis)> type2])
	
	gen-check: 
		Relation(type1, TransitiveClosure(rel), type2) -> CallT(SVar("check-trans-type-rel"), [], [<gen-analysis> rel, <try(gen-analysis)> type1, <try(gen-analysis)> type2])
	
	gen-check:	 
		Strategy(App(s, term)) -> CallT(SVar("check-strategy"), [s], [<try(gen-analysis)> term])
	
	gen-check:	 
		Strategy(AM(App(s, term1), term2)) -> CallT(SVar("check-strategy"), [s|checks], terms)
		where
			(checks, terms) := <needs-check> (term1, term2)
	
	needs-check: (term1, term2) -> (checks, terms)
	where
		if fail then 
			checks := []; 
			terms  := [<try(gen-analysis)> term1, <try(gen-analysis)> term2] 
		else 
			checks := [<!Match(<try(gen-analysis)>)> term2]; 
			terms  := [<try(gen-analysis)> term1] 
		end